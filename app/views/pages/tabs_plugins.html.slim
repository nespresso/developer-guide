= headline_with_flash 'Tabs plugins'

== render 'tabs_plugins_teaser'

markdown:
  ## Things to consider

  - The [interaction design pattern promoted for ARIA-enabled tabs](http://www.w3.org/TR/2009/WD-wai-aria-practices-20091215/#tabpanel) suggests that just the currently active tab control be found in the Tab order, and that the tab controls be navigable using the arrow keys. Setting focus to a tab control loads the associated content tabpanel which is otherwise hidden. In a web page, for most screen readers (or, at least those that work with a virtual buffer) this means switching to Application Mode. JAWS 11 and NVDA 2010.1 both automatically enter Application Mode when focus is set to a tab control. Yet, because the screen reader is now passing keyboard commands through to the browser, we can no longer use the normal reading commands to access the tabpanel’s content. We can still easily use the Tab key to move to the first form control or focussable element in the tabpanel and interact with it. However, if a tabpanel contains nothing but regular text content, there is nothing to set focus to using the Tab key. The user can, of course, manually turn the Virtual Cursor back on, but it is worth noting that setting focus to a non-form or non-application element can accomplish the same thing in some instances; so this suggests a possible workaround, namely including such an element, for example, a heading, in the Tab order at the beginning of the tabpanel content.
  - Conclusion: there is the impression that there does not appear to be one ideal approach where broad accessibility is concerned. It may be reasonable to include for screen reader users some sort of instructions just before the tabbed interface. Still, the very fact that such instructions should prove useful suggests, I think, that an ARIA-enabled tabbed interface might for now just get in the way of a usable experience for too many users. To sum up, in none of the versions presented here will the experience necessarily be clear and obvious for all users with all screen readers, and especially not for older versions.
  
  Source: [Accessible ARIA Tabs](http://accessibleculture.org/articles/2010/08/aria-tabs/), published in 2010!
  
  Frage: GEHT JAWS IMMER IN DEN APP MODUS, EGAL WIE DAS WIDGET PROGRAMIERT IST?!
  Frage: IST NVDA IM IE IMMER SO EXTREM LANGSAM?!
  Da hat es evtl. gute zugängliche Widgets: http://accessibility.athena-ict.com/aria/aria-examples-index.shtml
  Nur fancy ARIA Tabs benutzen, wenn es sich tatsächlich um eine Webapp mit vielen, vielen Tabs handelt! Sonst besser nahe bei traditionellem HTML bleiben. (Kommentar von Jan Hellbusch im Mail vom 21.10.2015, 14:33)
  Sowohl JAWS als auch NVDA scheinen Meta-Infos unabhängig von Seitensprache auszugeben

  ## Reviews

table.table.table-bordered.table-striped
  thead
    tr
      th Name
      th Producer
      th Rating

  tbody
    tr
      th = link_to 'Bootstrap Tabs', example_path('bootstrap_tabs_plugin')
      td = link_to 'Twitter Bootstrap', 'http://getbootstrap.com/javascript/#tabs'
      td
        markdown:
          - JAWS
              - IE: Sagt den geöffneten Status mit "collapsed" an
          - NVDA
              - IE: beim Aktivieren von Tab wird direkt der Inhalt vorgelesen, der Fokus bleibt aber beim Tab selber?!

    tr
      th = link_to 'Whatsock Tabs', example_path('whatsock_tabs_plugin')
      td = link_to 'Whatsock', 'http://whatsock.com/modules/aria_tabs_menu_modules/demo.htm'
      td
        markdown:
          - JAWS/NVDA
              - FF/IE: Non-ARIA Tabs geben kein Feedback, wenn man sie öffnet
          - NVDA
              - IE: Non-ARIA Tabs werden in einem Schwall vorgelesen und sind nicht einzeln im Browse-Modus annavigierbar

    tr
      th = link_to 'jQuery UI Tabs', example_path('jquery_ui_tabs_plugin')
      td = link_to 'jQuery UI', 'https://jqueryui.com/tabs/'
      td
        markdown:
          - JAWS:
              - IE/FF: Recht seltsames (dafür in beiden Browsern konsistentes?) Verhalten, recht unterschiedlich ob Browse oder Focus Mode; dafür kann mit Spacebar tatsächlich aktiviert werden. Aber es wird oft fälschlicherweise "collapsed" ausgegeben. Es wird im Fokus Modus autom. geöffnet.
          - NVDA:
              - IE/FF: Unbedienbar! Nur in Focus Mode einigermassen verwendbar. Aber es wird oft fälschlicherweise "collapsed" ausgegeben.

    tr
      th = link_to 'jQuery Accessible Tabs', example_path('jquery_accessible_tabs_plugin')
      td = link_to 'Accessible-Tabs', 'http://blog.ginader.de/dev/jquery/accessible-tabs/simple.html'
      td
        markdown:
          - JAWS:
              - IE/FF: Eine sehr einfache und gute Idee, ohne irgendwas über Tabs zu sagen (kein ARIA!). Allerdings sind die Inhalte nicht richtig versteckt: die Headings der einzelnen Tabs sind sichtbar für Screenreader, deren Inhalte aber nur, wenn der entsprechende Tab aktiviert ist (und es gibt keine Info darüber, dass bzw. welcher Tab aktiviert ist)
